FUNCTION Nearest_Neighbor_TSP(start):  
    # Initialize an array to track visited cities  
    Initialize visited[] as False for all cities  

    # Store the path starting from the given city  
    Initialize path[] with start city  

    # Mark the starting city as visited  
    Mark start city as visited  

    # Initialize total travel cost to zero  
    total_cost = 0  

    # Loop to visit all cities except the start city  
    FOR i FROM 1 TO num_cities - 1:  
        # Get the last visited city  
        last_city = path[-1]  

        # Initialize the nearest city and minimum distance  
        nearest_city = NULL  
        min_distance = INF  

        # Find the nearest unvisited city  
        FOR each city in range(num_cities):  
            IF city is NOT visited AND distance[last_city][city] < min_distance:  
                # Update the nearest city and minimum distance  
                nearest_city = city  
                min_distance = distance[last_city][city]  

        # If a nearest city is found, visit it  
        IF nearest_city is NOT NULL:  
            # Add nearest city to the path  
            Add nearest_city to path[]  

            # Mark the nearest city as visited  
            Mark nearest_city as visited  

            # Add the travel cost  
            total_cost += min_distance  

    # Return to the start city to complete the tour  
    total_cost += distance[path[-1]][start]  

    # Append the start city to complete the cycle  
    Add start city to path[]  

    # Return the final path and total cost  
    RETURN path, total_cost  
